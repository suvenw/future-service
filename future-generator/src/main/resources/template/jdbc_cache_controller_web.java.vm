package ${packageName}.${moduleName}.controller;




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.io.*;

import org.springframework.ui.ModelMap;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.http.HttpServletResponse;
import org.apache.shiro.authz.annotation.RequiresPermissions;
${importAutowiredPackage}

import ${mainPath}.core.db.IterableConverter;
import ${mainPath}.util.excel.ExcelUtils;
import ${mainPath}.common.data.BasePage;
import ${mainPath}.common.api.ApiDoc;
import ${mainPath}.common.api.DocumentConst;
import ${mainPath}.common.enums.SysResultCodeEnum;

import ${mainPath}.http.data.vo.HttpRequestByIdListVo;
import ${mainPath}.http.data.vo.HttpRequestByIdVo;
import ${mainPath}.http.data.vo.ResponseResultList;
import ${mainPath}.http.exception.SystemRuntimeException;
import ${mainPath}.http.handler.OutputMessage;




import ${packageName}.${moduleName}.service.${className}Service;
import ${packageName}.${moduleName}.vo.request.${className}QueryRequestVo;
import ${packageName}.${moduleName}.vo.response.${className}ShowResponseVo;
import ${packageName}.${moduleName}.dto.request.${className}RequestDto;
import ${packageName}.${moduleName}.dto.response.${className}ResponseDto;
import ${packageName}.${moduleName}.vo.request.${className}RequestVo;
import ${packageName}.${moduleName}.vo.response.${className}ResponseVo;

import ${packageName}.${moduleName}.vo.request.${className}AddRequestVo;
import ${packageName}.${moduleName}.vo.response.${className}ResponseVo;


/**
 * @ClassName: ${className}Controller.java
 *
 * @Author 作者 : ${author}
 * @email 邮箱 : ${email}
 * @CreateDate 创建时间: ${datetime}
 * @Version 版本: v1.0.0
 * <pre>
 *
 *  @Description: ${description} 的控制服务类
 *
 * </pre>
 * <pre>
 * 修改记录
 *    修改后版本:     修改人：  修改日期:     修改内容:
 * ----------------------------------------------------------------------------
 *
 * ----------------------------------------------------------------------------
 * @RequestMapping("/${moduleName}/${paramName}")
 * </pre>
 * @Copyright: (c) 2021 gc by https://www.suven.top
 **/



@ApiDoc(
    group = DocumentConst.Sys.SYS_DOC_GROUP,
    groupDesc= DocumentConst.Sys.SYS_DOC_DES,
    module = "${description}模块"
)
@Controller
public class ${className}WebController {


    public  interface UrlCommand{
        public static final String ${moduleName}_${paramName}_list    = "/${moduleName}/${pathName}/list";
        public static final String ${moduleName}_${paramName}_add     = "/${moduleName}/${pathName}/add";
        public static final String ${moduleName}_${paramName}_modify  = "/${moduleName}/${pathName}/modify";
        public static final String ${moduleName}_${paramName}_detail  = "/${moduleName}/${pathName}/detail";
        public static final String ${moduleName}_${paramName}_edit    = "/${moduleName}/${pathName}/edit";
        public static final String ${moduleName}_${paramName}_newInfo =  "/${moduleName}/${pathName}/newInfo";
        public static final String ${moduleName}_${paramName}_del     =  "/${moduleName}/${pathName}/delete";
        public static final String ${moduleName}_${paramName}_export  =   "/${moduleName}/${pathName}/export";
        public static final String ${moduleName}_${paramName}_import  =   "/${moduleName}/${pathName}/import";
    }

    private final Logger logger = LoggerFactory.getLogger(getClass());
    ${importAutowired}
    private ${className}Service  ${paramName}Service;
    
    /**
    * @Title: 跳转到${description}主界面
    * @Description:${paramName}RequestVo @{Link ${className}RequestVo}
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @RequestMapping(value = "/${moduleName}/${paramName}")
    @RequiresPermissions("${moduleName}:${pathName}:list")
        public String index(){
        return "${moduleName}/${paramName}_index";
    }
    /**
    * @Title: 获取${description}分页信息
    * @Description:${paramName}RequestVo @{Link ${className}RequestVo}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */

    @ApiDoc(
        value = "分页获取${description}信息",
        request = ${className}QueryRequestVo.class,
        response = ${className}ShowResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_list  ,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public void list( OutputMessage out, ${className}QueryRequestVo ${paramName}QueryRequestVo){
        ${className}RequestDto ${paramName}RequestDto = ${className}RequestDto.build().clone(${paramName}QueryRequestVo);
    
        BasePage page =  BasePage.build().toPageSize(${paramName}QueryRequestVo.getPageSize()).toPageNo(${paramName}QueryRequestVo.getPageNo());
        page.toParamObject(${paramName}RequestDto );
        ResponseResultList<${className}ResponseDto> resultList = ${paramName}Service.get${className}ByNextPage(page);
        if(null == resultList || resultList.getList().isEmpty() ){
            out.writeSuccess();
            return;
        }
        int total = ${paramName}Service.get${className}Count(${paramName}RequestDto);

        List<${className}ResponseVo> listVo = IterableConverter.convertList(resultList.getList(),${className}ResponseVo.class);
        ResponseResultList result = ResponseResultList.build()
                .setResult(listVo,page.getSize(),resultList.getTotal())
                .toPageIndex(resultList.getPageIndex());

        out.write(result);
    }
    
    
    
    
    
    /**
    * @Title: 新增${description}信息
    * @Description:${paramName}RequestVo @{Link ${className}RequestVo}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @ApiDoc(
        value = "新增${description}信息",
        request = ${className}AddRequestVo.class,
        response = Long.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_add  ,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:add")
    public void add(OutputMessage out, ${className}AddRequestVo ${paramName}AddRequestVo){
    
        ${className}RequestDto ${paramName}RequestDto =  ${className}RequestDto.build().clone(${paramName}AddRequestVo);
    

        ${className}ResponseDto ${paramName}responseDto =  ${paramName}Service.save${className}(${paramName}RequestDto);
        if(${paramName}responseDto == null){
            out.write(SysResultCodeEnum.SYS_UNKOWNN_FAIL);
            return;
        }
        out.write( ${paramName}responseDto.getId());
    }
    /**
    * @Title: 修改${description}信息
    * @Description:${paramName}RequestVo @{Link ${className}RequestVo}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @ApiDoc(
        value = "修改${description}信息",
        request = ${className}RequestVo.class,
        response = Boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_modify  ,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:modify")
    public void modify(OutputMessage out,${className}AddRequestVo ${paramName}AddRequestVo){

        if(${paramName}AddRequestVo.getId() == 0){
            throw new SystemRuntimeException(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
        }
        ${className}RequestDto ${paramName}RequestDto =  ${className}RequestDto.build().clone(${paramName}AddRequestVo);


        boolean result =  ${paramName}Service.update${className}(${paramName}RequestDto);

        out.write(result);



    }
    
    /**
    * @Title: 查看${description}信息
    * @Description:${paramName}RequestVo @{Link ${className}RequestVo}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @ApiDoc(
        value = " 查看${description}信息",
        request = HttpRequestByIdVo.class,
        response = ${className}ResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_detail  ,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public void detail(OutputMessage out, HttpRequestByIdVo idRequestVo){
    
        ${className}ResponseDto ${paramName}ResponseDto = ${paramName}Service.get${className}ById(idRequestVo.getId());
        ${className}ResponseVo ${paramName}ResponseVo =  ${className}ResponseVo.build().clone(${paramName}ResponseDto);

        out.write(${paramName}ResponseVo);
    }
    
    
    
    /**
    * @Title: 跳转${description}编辑界面
    * @Description:id @{Link Long}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @ApiDoc(
        value = " 跳转${description}编辑界面",
        request = HttpRequestByIdVo.class,
        response = ${className}ResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_edit  ,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:modify")
    public void edit(OutputMessage out, HttpRequestByIdVo idRequestVo){
    
        ${className}ResponseDto ${paramName}ResponseDto = ${paramName}Service.get${className}ById(idRequestVo.getId());
        ${className}ResponseVo ${paramName}ResponseVo =  ${className}ResponseVo.build().clone(${paramName}ResponseDto);

        out.write(${paramName}ResponseVo);

    }
    
    
    
    
    /**
    * @Title: 跳转${description}新增编辑界面
    * @Description:id @{Link Long}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_newInfo,  method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:add")
    public String newInfo(ModelMap modelMap){
    return "${moduleName}/${paramName}_edit";
    }
    /**
    * @Title: 删除${description}信息
    * @Description:id @{Link Long}
    * @param
    * @return
    * @throw
    * @author ${author}
    * @date ${datetime}
    *  --------------------------------------------------------
    *  modifyer    modifyTime                 comment
    *
    *  --------------------------------------------------------
    */
    @ApiDoc(
        value = " 删除${description}信息",
        request = HttpRequestByIdListVo.class,
        response = Integer.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_del  ,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:del")
    public void del(OutputMessage out, HttpRequestByIdListVo idRequestVo){
        if (idRequestVo.getIdList()== null || idRequestVo.getIdList().isEmpty()) {
            throw new SystemRuntimeException(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
        }
        int result = ${paramName}Service.del${className}ByIds(idRequestVo.getIdList());

        out.write(result);
    }

    /**
     * @Title: 导出${description}信息
     * @Description:id @{Link Long}
     * @param
     * @return
     * @throw
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "导出${description}信息",
            request = ${className}RequestVo.class,
            response = boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_export,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:export")
    public void export(HttpServletResponse response, ${className}RequestVo ${paramName}RequestVo){

            ${className}RequestDto ${paramName}RequestDto = ${className}RequestDto.build().clone(${paramName}RequestVo);

        BasePage page =  BasePage.build().toPageSize(${paramName}RequestVo.getPageSize()).toPageNo(${paramName}RequestVo.getPageNo());
        page.setParamObject(${paramName}RequestDto );

        ResponseResultList<${className}ResponseDto> resultList = ${paramName}Service.get${className}ByNextPage(page);
        List<${className}ResponseDto> data = resultList.getList();

        //写入文件
        try {
            ExcelUtils.writeExcel(response.getOutputStream(), ${className}ResponseVo.class,data,"${description}");
        } catch (IOException e) {
            logger.error(e.getMessage());
        }
    }

    /**
        * 通过excel导入数据
        * @param out
        * @param files
        */
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_import, method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:import")
    public void importExcel(OutputResponse out, @PathVariable("files") MultipartFile files) {
        //写入文件
        try {
            InputStream initialStream = files.getInputStream();
            boolean result = ${paramName}Service.saveData(initialStream);
            out.write(result);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }




}
package ${packageName}.${moduleName}.controller;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.servlet.http.HttpServletResponse;
import java.util.ArrayList;
import java.util.List;
import java.io.*;

import org.springframework.ui.ModelMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.multipart.MultipartFile;







${importAutowiredPackage}

import com.sixeco.framework.core.db.IterableConverter;
import ${mainPath}.http.data.vo.ResponseResultList;
import ${mainPath}.http.data.vo.ResponseResultVo;
import ${mainPath}.http.handler.OutputResponse;
import ${mainPath}.http.data.vo.HttpRequestByIdVo;
import ${mainPath}.http.data.vo.HttpRequestByIdListVo;
import ${mainPath}.http.data.vo.HttpRequestSortByIdListVo;
import ${mainPath}.util.date.DateUtil;
import ${mainPath}.util.excel.ExcelUtils;
import ${mainPath}.common.data.BasePage;
import ${mainPath}.common.api.ApiDoc;
import ${mainPath}.common.api.DocumentConst;
import ${mainPath}.common.enums.SysResultCodeEnum;
import ${mainPath}.common.enums.TbStatusEnum;
import ${mainPath}.core.db.IterableConverter;


import ${packageName}.${moduleName}.service.${className}Service;
import ${packageName}.${moduleName}.vo.request.${className}QueryRequestVo;
import ${packageName}.${moduleName}.vo.request.${className}AddRequestVo;
import ${packageName}.${moduleName}.vo.response.${className}ShowResponseVo;
import ${packageName}.${moduleName}.vo.response.${className}ResponseVo;

import ${packageName}.${moduleName}.dto.request.${className}RequestDto;
import ${packageName}.${moduleName}.dto.response.${className}ResponseDto;
import ${packageName}.${moduleName}.dto.enums.${className}QueryEnum;


/**
 * @ClassName: ${className}WebController.java
 *
 * @Author 作者 : ${author}
 * @CreateDate 创建时间: ${datetime}
 * @Version 版本: v1.0.0
 * <pre>
 *
 *  @Description: ${description} 的控制服务类
 *
 * </pre>
 * <pre>
 * 修改记录
 *    修改后版本:     修改人：  修改日期:     修改内容:
 * ----------------------------------------------------------------------------
 *
 * ----------------------------------------------------------------------------
 * @RequestMapping("/${moduleName}/${paramName}")
 * </pre>
 * @Copyright: (c) 2021 gc by https://www.suven.top
 **/


@Controller
@ApiDoc(
        group = DocumentConst.Sys.SYS_DOC_GROUP,
        groupDesc= DocumentConst.Sys.SYS_DOC_DES,
        module = "${description}模块"
)
public class ${className}WebController {


    private final Logger logger = LoggerFactory.getLogger(getClass());

    public static interface UrlCommand{
        public static final String ${moduleName}_${paramName}_index      =   "/${moduleName}/${pathName}/index";
        public static final String ${moduleName}_${paramName}_list       =   "/${moduleName}/${pathName}/list";
        public static final String ${moduleName}_${paramName}_queryList  =   "/${moduleName}/${pathName}/querylist";
        public static final String ${moduleName}_${paramName}_add        =   "/${moduleName}/${pathName}/add";
        public static final String ${moduleName}_${paramName}_modify     =   "/${moduleName}/${pathName}/modify";
        public static final String ${moduleName}_${paramName}_detail     =   "/${moduleName}/${pathName}/detail";
        public static final String ${moduleName}_${paramName}_edit       =   "/${moduleName}/${pathName}/edit";
        public static final String ${moduleName}_${paramName}_newInfo    =   "/${moduleName}/${pathName}/newInfo";
        public static final String ${moduleName}_${paramName}_del        =   "/${moduleName}/${pathName}/delete";
        public static final String ${moduleName}_${paramName}_sort       =   "/${moduleName}/${pathName}/sort";
        public static final String ${moduleName}_${paramName}_turnOn     =   "/${moduleName}/${pathName}/turnOn";
        public static final String ${moduleName}_${paramName}_turnOff    =   "/${moduleName}/${pathName}/turnOff";
        public static final String ${moduleName}_${paramName}_export     =   "/${moduleName}/${pathName}/export";
        public static final String ${moduleName}_${paramName}_import     =   "/${moduleName}/${pathName}/import";
    }




    ${importAutowired}
    private ${className}Service  ${paramName}Service;

    /**
     * @Title: 跳转到${description}主界面
     * @return 字符串url
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @RequestMapping(value =  UrlCommand.${moduleName}_${paramName}_index,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public String index(){
        return "${moduleName}/${paramName}_index";
    }


    /**
     * @Title: 获取${description}分页信息
     * @Description:${paramName}QueryRequestVo @{Link ${className}QueryRequestVo}
     * @param
     * @return  ResponseResultList 对象 List<${className}ShowResponseVo>
     * @throw
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "获取${description}分页信息",
            request = ${className}QueryRequestVo.class,
            response = ${className}ShowResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_list,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public   void   list( OutputResponse out, ${className}QueryRequestVo ${paramName}QueryRequestVo){
            ${className}RequestDto ${paramName}RequestDto = ${className}RequestDto.build( ).clone(${paramName}QueryRequestVo);

        BasePage page =  BasePage.build().toPageSize(${paramName}QueryRequestVo.getPageSize()).toPageNo(${paramName}QueryRequestVo.getPageNo());
        page.toParamObject(${paramName}RequestDto );
         ${className}QueryEnum queryEnum =  ${className}QueryEnum.DESC_ID;
        ResponseResultList<${className}ResponseDto> resultList = ${paramName}Service.get${className}ByNextPage(page,queryEnum);
        if(null == resultList || resultList.getList().isEmpty() ){
            out.write( ResponseResultList.build());
            return ;
        }

        List<${className}ShowResponseVo> listVo = IterableConverter.convertList(resultList.getList(),${className}ShowResponseVo.class);
        ResponseResultList result = ResponseResultList.build()
                .setResult(listVo,page.getSize(),resultList.getTotal())
                .toPageIndex(resultList.getPageIndex());
        out.write( result);
    }

/**
     * @Title: 根据条件查谒${description}分页信息
     * @Description:${paramName}QueryRequestVo @{Link ${className}QueryRequestVo}
     * @param
     * @return   ResponseResultList 对象 List<${className}ShowResponseVo>
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "获取${description}分页信息",
            request = ${className}QueryRequestVo.class,
            response = ${className}ShowResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_queryList,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:query")
    public   void   queryList( OutputResponse out, ${className}QueryRequestVo ${paramName}QueryRequestVo){
            ${className}RequestDto ${paramName}RequestDto = ${className}RequestDto.build( ).clone(${paramName}QueryRequestVo);

        BasePage page =  BasePage.build().toPageSize(${paramName}QueryRequestVo.getPageSize()).toPageNo(${paramName}QueryRequestVo.getPageNo());
        page.toParamObject(${paramName}RequestDto );
        ${className}QueryEnum queryEnum =  ${className}QueryEnum.DESC_ID;
        List<${className}ResponseDto> resultList = ${paramName}Service.get${className}ListByQuery(page,queryEnum);
        if(null == resultList || resultList.isEmpty() ){
            out.write( new ArrayList());
            return ;
        }

        List<${className}ShowResponseVo> listVo = IterableConverter.convertList(resultList,${className}ShowResponseVo.class);

        out.write( listVo);
    }



    /**
     * @Title: 新增${description}信息
     * @Description:${paramName}AddRequestVo @{Link ${className}AddRequestVo}
     * @param ${paramName}AddRequestVo 对象
     * @return long类型id
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "新增${description}信息",
            request = ${className}AddRequestVo.class,
            response = Long.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_add,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:add")
    public  void  add(OutputResponse out, ${className}AddRequestVo ${paramName}AddRequestVo){

            ${className}RequestDto ${paramName}RequestDto =  ${className}RequestDto.build().clone(${paramName}AddRequestVo);

            //${paramName}RequestDto.setStatus(TbStatusEnum.ENABLE.index());
            ${className}ResponseDto ${paramName}responseDto =  ${paramName}Service.save${className}(${paramName}RequestDto);
        if(${paramName}responseDto == null){
            out.write(SysResultCodeEnum.SYS_UNKOWNN_FAIL);
            return;
        }
        out.write( ${paramName}responseDto.getId());
    }
    /**
     * @Title: 修改${description}信息
     * @Description:${paramName}AddRequestVo @{Link ${className}AddRequestVo}
     * @param  ${paramName}AddRequestVo 对象
     * @return  boolean 类型1或0;
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "修改${description}信息",
            request = ${className}AddRequestVo.class,
            response = boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_modify , method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:modify")
    public  void  modify(OutputResponse out,${className}AddRequestVo ${paramName}AddRequestVo){

            ${className}RequestDto ${paramName}RequestDto =  ${className}RequestDto.build().clone(${paramName}AddRequestVo);

        if(${paramName}RequestDto.getId() == 0){
            out.write(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
            return;
        }
        boolean result =  ${paramName}Service.update${className}(${paramName}RequestDto);
        out.write(result);
    }

    /**
     * @Title: 查看${description}信息
     * @Description:${paramName}RequestVo @{Link ${className}RequestVo}
     * @param
     * @return  ${className}ResponseVo  对象
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */

    @ApiDoc(
            value = "查看${description}信息",
            request = HttpRequestByIdVo.class,
            response = ${className}ShowResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_detail,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public void detail(OutputResponse out, HttpRequestByIdVo idRequestVo){

            ${className}ResponseDto ${paramName}ResponseDto = ${paramName}Service.get${className}ById(idRequestVo.getId());
            ${className}ShowResponseVo vo =  ${className}ShowResponseVo.build().clone(${paramName}ResponseDto);
        out.write(vo);
    }



    /**
     * @Title: 跳转${description}编辑界面
     * @Description:id @{Link Long}
     * @param
     * @return ${className}ShowResponseVo 对象
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "查看${description}信息",
            request = HttpRequestByIdVo.class,
            response = ${className}ShowResponseVo.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_edit , method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:modify")
    public void edit(OutputResponse out, HttpRequestByIdVo idRequestVo){

            ${className}ResponseDto ${paramName}ResponseDto = ${paramName}Service.get${className}ById(idRequestVo.getId());
            ${className}ShowResponseVo vo =  ${className}ShowResponseVo.build().clone(${paramName}ResponseDto);
        out.write(vo);

    }




    /**
     * @Title: 跳转${description}新增编辑界面
     * @Description:id @{Link Long}
     * @param
     * @return  返回新增加的url
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifyer    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_newInfo , method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:add")
    public String newInfo(ModelMap modelMap){
        return "${moduleName}/${paramName}_edit";
    }

    /**
     * @Title: 删除${description}信息
     * @Description:id @{Link Long}
     * @param
     * @return   boolean 类型1或0;
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "删除${description}信息",
            request = HttpRequestByIdListVo.class,
            response = Integer.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_del,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:del")
    public  void  del(OutputResponse out, HttpRequestByIdListVo idRequestVo){
        if (idRequestVo.getIdList() == null || idRequestVo.getIdList().isEmpty()) {
            out.write(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
            return ;
        }
        int result = ${paramName}Service.del${className}ByIds(idRequestVo.getIdList());
        out.write(result);
    }


#if( $column.baseEntityNo==2 )

    /**
     * @Title: 排序${description}信息
     * @Description:id @{Link Long}
     * @param
     * @return
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "排序${description}信息",
            request = HttpRequestSortByIdListVo.class,
            response = boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_sort,method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:sort")
    public  void  sort(OutputResponse out,HttpRequestSortByIdListVo idRequestVo){
        if (idRequestVo == null || idRequestVo.getIdList() == null || idRequestVo.getIdList().isEmpty()) {
            out.write(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
            return ;
        }
        boolean result = false;
        if(idRequestVo.getIdList().size() == 1){
            result =  ${paramName}Service.updateSortById(idRequestVo.getIdList().get(0),idRequestVo.getSortList().get(0));
        }else {
            result =  ${paramName}Service.updateSortByIds(idRequestVo.getIdList(),idRequestVo.getSortList());
        }
        out.write(result);
    }

    /**
     * @Title: 启用${description}信息
     * @Description:id @{Link Long}
     * @param
     * @return
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "启用,上架${description}信息",
            request = HttpRequestByIdListVo.class,
            response = boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_turnOn,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:turnOn")
    public  void  turnOn(OutputResponse out,HttpRequestByIdListVo idRequestVo){
        if (idRequestVo.getIdList() == null || idRequestVo.getIdList().isEmpty()) {
            out.write(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
            return ;
        }
        boolean result = ${paramName}Service.turnOn(idRequestVo.getIdList());
        out.write(result);
    }


    /**
     * @Title: 禁用${description}信息
     * @Description:id @{Link Long}
     * @param
     * @return
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "下架${description}信息",
            request = HttpRequestByIdListVo.class,
            response = boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_turnOff,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:turnOff")
    public  void  turnOff(OutputResponse out,HttpRequestByIdListVo idRequestVo){
        if (idRequestVo == null || idRequestVo.getIdList() == null || idRequestVo.getIdList().isEmpty()) {
            out.write(SysResultCodeEnum.SYS_WEB_ID_INFO_NO_EXIST);
            return ;
        }
        boolean result = ${paramName}Service.turnOff(idRequestVo.getIdList());
        out.write(result);
    }
#end

    /**
     * @Title: 导出${description}信息
     * @Description:id @{Link Long}
     * @param
     * @return
     * @author ${author}
     * @date ${datetime}
     *  --------------------------------------------------------
     *  modifier    modifyTime                 comment
     *
     *  --------------------------------------------------------
     */
    @ApiDoc(
            value = "导出${description}信息",
            request = ${className}QueryRequestVo.class,
            response = boolean.class
    )
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_export,method = RequestMethod.GET)
    @RequiresPermissions("${moduleName}:${pathName}:export")
    public void export(HttpServletResponse response, ${className}QueryRequestVo ${paramName}QueryRequestVo){

            ${className}RequestDto ${paramName}RequestDto = ${className}RequestDto.build().clone(${paramName}QueryRequestVo);

        BasePage page =  BasePage.build().toPageSize(${paramName}QueryRequestVo.getPageSize()).toPageNo(${paramName}QueryRequestVo.getPageNo());
        page.toParamObject(${paramName}RequestDto );

        ${className}QueryEnum queryEnum =  ${className}QueryEnum.DESC_ID;
        ResponseResultList<${className}ResponseDto> resultList = ${paramName}Service.get${className}ByNextPage(page,queryEnum);
        List<${className}ResponseDto> data = resultList.getList();

        //写入文件
        try {
            OutputStream outputStream = response.getOutputStream();
            ExcelUtils.writeExcel(outputStream, ${className}ResponseVo.class,data,"导出${description}信息");
        } catch (Exception e) {
            logger.error(e.getMessage(),e);
        }
    }


    /**
    * 通过excel导入数据
    * @param out
    * @param files
    */
    @RequestMapping(value = UrlCommand.${moduleName}_${paramName}_import, method = RequestMethod.POST)
    @RequiresPermissions("${moduleName}:${pathName}:import")
    public void importExcel(OutputResponse out, @PathVariable("files") MultipartFile files) {
        //写入文件
        try {
            InputStream initialStream = files.getInputStream();
            boolean result = ${paramName}Service.saveData(initialStream);
            out.write(result);
        } catch (Exception e) {
            logger.error(e.getMessage(), e);
        }
    }


}
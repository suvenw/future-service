package ${packageName}.${moduleName}.dao;


import java.util.Map;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;

import ${mainPath}.util.PageUtils;
import ${mainPath}.core.db.ext.Query;
import ${mainPath}.core.mybatis.${baseEntityDao};

import ${packageName}.${moduleName}.mapper.${className}Mapper;
import ${packageName}.${moduleName}.entity.${className};
import ${packageName}.${moduleName}.dao.${className}Dao;
import ${packageName}.${moduleName}.dto.enums.${className}QueryEnum;
import java.util.ArrayList;
import java.util.List;



/**
 * @ClassName: ${className}Dao.java
 *
 * @Author 作者 : ${author}
 * @CreateDate 创建时间: ${datetime}
 * @Version 版本: v1.0.0
 * <pre>
 *
 *  @Description: ${description} 的数据库查询逻辑实现类
 *
 * </pre>
 * <pre>
 * 修改记录
 *    修改后版本:     修改人：  修改日期:     修改内容:
 * ----------------------------------------------------------------------------
 *
 * ----------------------------------------------------------------------------
 * </pre>
 * @Copyright: (c) 2021 gc by https://www.suven.top
 **/



@Service("${classname}Dao")
public class ${className}Dao extends ${baseEntityDao}<${className}Mapper, ${className}> {

    @Autowired
    private ${className}Mapper  ${paramName}Mapper;


    /**
     * 保存创建${className},并且保存到缓存中
     * @param ${paramName}
     * @author ${author}
     * @date ${datetime}
     */

    public ${className} saveId(${className} ${paramName}){
            if(null == ${paramName}){
                return  null;
           }
          long id = ${paramName}Mapper.saveId(${paramName});
          if (returnBool(id)){
                return ${paramName};
          }
           return null;


    }

     /**
         * 保存创建${className},并且保存到缓存中
         * @param ${paramName}
         * @author ${author}
         * @date ${datetime}
         */

        public ${className} saveToId(${className} ${paramName}){
                if(null == ${paramName}){
                    return  null;
               }
              long id = ${paramName}Mapper.saveToId(${paramName});
              if (returnBool(id)){
                    return ${paramName};
              }
               return null;


        }

    /**
     * 批量保存创建${className},并且保存到缓存中
     * @param ${paramName}List
     * @author ${author}
     * @date ${datetime}
     */
    public boolean saveBatchId(List<${className}> ${paramName}List){
            if(null == ${paramName}List)
                return  false;
           long id =  ${paramName}Mapper.saveBatch(${paramName}List);
           return returnBool(id);

    }


    /**
     * 通过分页获取${className}信息实现查找缓存和数据库的方法
     * @param queryWrapper BasePage
     * @return
     * @author ${author}
     * @date ${datetime}
     */
    public List<${className}> getListByPage(IPage<${className}> iPage, QueryWrapper<${className}> queryWrapper ){


        List<${className}> resDtoList = new ArrayList<>();
        if(queryWrapper == null){
            queryWrapper = new QueryWrapper();
        }

        IPage<${className}> page = super.page(iPage, queryWrapper);
        if(null == page){
            return resDtoList;
        }

        List<${className}>  list = page.getRecords();
        if(null == list || list.isEmpty()){
            return resDtoList;
        }


        return list;

        }
    /**
     * 通过分页获取${className}信息实现查找缓存和数据库的方法
     * @param queryWrapper QueryWrapper
     * @return
     * @author ${author}
     * @date ${datetime}
     */
    public List<${className}> getListByQuery( QueryWrapper<${className}> queryWrapper ){


        List<${className}> resDtoList = new ArrayList<>();
        if(queryWrapper == null){
            queryWrapper = new QueryWrapper();
        }

        List<${className}> list = super.list(queryWrapper);
        if(null == list){
            return resDtoList;
        }

        return list;

        }

    /**
     * 通过枚举实现${className}不同数据库的条件查询的逻辑实现的方法
     * @param queryEnum RedGroupDeviceQueryShipEnum
     * @param queryObject 参数对象实现
     * @return
     * @author ${author}
     * @date ${datetime}
     */
    public QueryWrapper<${className}> builderQueryEnum(${className}QueryEnum queryEnum,  Object queryObject){
           QueryWrapper<${className}> queryWrapper = new QueryWrapper<>();
           if(queryEnum == null){
               return queryWrapper;
           }
           if(queryObject == null){
               return queryWrapper;
           }
            ${className}  ${paramName} = ${className}.build().clone(queryObject);
           switch (queryEnum){
               case DESC_ID :{
                   queryWrapper.orderByDesc("id");
                   break;
               }
               default:
                   break;
           }
          return queryWrapper;
       }
}
package ${packageName}.${moduleName}.mapper;

import ${packageName}.${moduleName}.entity.${className};

import ${packageName}.${moduleName}.dto.enums.${className}QueryEnum;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import org.apache.ibatis.annotations.Mapper;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;




/**
 * @ClassName: ${className}Mapper.java
 *
 * @Author 作者 : ${author}
 * @CreateDate 创建时间: ${datetime}
 * @Version 版本: v1.0.0
 * <pre>
 *
 *  @Description: ${description} 的数据库sql编写实现类
 *
 * </pre>
 * <pre>
 * 修改记录
 *    修改后版本:     修改人：  修改日期:     修改内容:
 * ----------------------------------------------------------------------------
 *
 * ----------------------------------------------------------------------------
 * </pre>
 * @Copyright: (c) 2021 gc by https://www.suven.top
 **/

@Mapper
public interface ${className}Mapper extends BaseMapper<${className}> {



	 /**
         * 通过分页获取${className}信息实现查找缓存和数据库的方法
         * @param queryWrapper BasePage
         * @return
         * @author ${author}
         * @date ${datetime}
         */
         default   public List<${className}> getListByPage(IPage<${className}> iPage, QueryWrapper<${className}> queryWrapper ){


            List<${className}> resDtoList = new ArrayList<>();
            if(queryWrapper == null){
                queryWrapper = new QueryWrapper();
            }
            IPage<${className}> page = this.selectPage(iPage, queryWrapper);
            if(null == page){
                return resDtoList;
            }

            List<${className}>  list = page.getRecords();
            if(null == list || list.isEmpty()){
                return resDtoList;
            }


            return list;

            }
        /**
         * 通过分页获取${className}信息实现查找缓存和数据库的方法
         * @param queryWrapper QueryWrapper
         * @return
         * @author ${author}
         * @date ${datetime}
         */
        default   public List<${className}> getListByQuery( QueryWrapper<${className}> queryWrapper ){


            List<${className}> resDtoList = new ArrayList<>();
            if(queryWrapper == null){
               throw new RuntimeException("数据库查询条件对象不能为空");

            }

            List<${className}> list = this.selectList(queryWrapper);
            if(null == list){
                return resDtoList;
            }

            return list;

            }

        /**
         * 通过枚举实现${className}不同数据库的条件查询的逻辑实现的方法
         * @param queryEnum RedGroupDeviceQueryShipEnum
         * @param  ${paramName} 参数对象实现
         * @return
         * @author ${author}
         * @date ${datetime}
         */
         default  public QueryWrapper<${className}> builderQueryEnum(${className}QueryEnum queryEnum,  ${className}  ${paramName}){

              QueryWrapper<${className}> queryWrapper = new QueryWrapper<>();
              if(queryEnum == null){
                  throw new RuntimeException("数据库查询条件类型queryEnum不能为空");
              }
              if(${paramName} == null){
                  throw new RuntimeException("数据库查询条件对象不能为空");
              }
               switch (queryEnum){
                   case DESC_ID :{
                       queryWrapper.orderByDesc("id");
                       break;
                   }
                   default:
                       break;
               }
              return queryWrapper;
           }
}

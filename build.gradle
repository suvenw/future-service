group 'com.suven.framework'
version '1.0.0-SNAPSHOT'

def mavenVersion = "0.0.162"
def mavenGroup = "com.suven.framework"

//def mavenUrl = "http://nexus.7955.com"
//https://oa.sixeco.com/nexus/content/groups/public/
def mavenUrl = "https://oa.sixeco.com/nexus"
def mavenUserName = 'admin'
def mavenPassword = 'sixeco123'
def mainClassName = 'com.suven.framework.MqMain'

// 全局参数配置
ext {
    configuration = [
            package          : "com.suven.framework",
            buildToolsVersion: "23.0.1",
            compileVersion   : 23,
            version_code     : 1,
            version_name     : "0.0.1",
    ]

    libVersions = [
            slf4j_version               : '1.7.25', //1.7.25', '1.8.0-beta2'
            logback_version             : '1.2.3',   //'1.2.3','1.3.0-alpha4'
            metrics_version             : '4.2.13',
            spring_version              : '5.3.21',
            spring_security_version     : '5.7.0',
            spring_boot_version         : '2.6.9',//  spring_boot_version  :'2.1.6.RELEASE'
            spring_cloud_version        : '3.1.1',
            spring_cloud_dds_version    : '2022.0.0',
            spring_cloud_alibaba_version: '2021.1',
            jetty_version               : '9.4.12.v20180830',
            mybatis_plus_version        : '3.2.0',
            dubbo_spring_boot_version   : '3.1.9',
            dubbo_version               : '3.1.9',
            alibaba_nacos_version       : '2.1.2',
            netty_all_version           : '4.1.77.Final'
    ]
}
// 全局脚本配置
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.0"
        classpath 'org.jacoco:org.jacoco.core:0.8.1'

    }
}
// 全局脚本配置
allprojects {
    apply {
        plugin 'idea'
        plugin 'java'
        plugin 'maven'
        plugin 'eclipse'
//        plugin 'war'
    }
    repositories {
        maven { url "${mavenUrl}/content/groups/public/" }
        maven { url "https://pypi.doubanio.com/simple/" }
        maven { url "https://repo.maven.apache.org/maven2/" }
        maven { url "https://mvnrepository.com/artifact/" }
        maven { url "https://maven.springframework.org/release/" }

    }

    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    sourceSets.main.java.srcDirs += ["src/gen/java"]

    jar {
        exclude 'logback.xml'
        exclude 'META-INF/cat'
        exclude '*.tpl'
        exclude '*.properties'
    }
    configurations {
//        provided
        compile.extendsFrom provided
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        all*.exclude group: 'org.eclipse.sisu', module: 'org.eclipse.sisu.plexus'
        all*.exclude group: 'org.eclipse.sisu', module: 'org.eclipse.sisu.inject'
        all*.exclude group: 'com.google.collections', module: 'google-collections'
        all*.exclude group: 'com.codahale.metrics', module: 'metrics'
        all*.exclude group: 'org.sonatype.gossip', module: 'gossip'
        all*.exclude group: 'org.codehaus.groovy', module: 'groovy-all'
        all*.exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed'
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        all*.exclude group: 'com.intellij', module: 'openapi'

    }

    uploadArchives {
        configuration = configurations['archives']
        repositories.mavenDeployer {
            repository(url: "${mavenUrl}/content/repositories/thirdparty/") {
                authentication(userName: "${mavenUserName}", password: "${mavenPassword}")
                pom.groupId = "${mavenGroup}"
                pom.version = "${mavenVersion}"

            }
            pom.whenConfigured { pom ->
                pom.dependencies.forEach { dep ->
                    if (dep.getVersion() == "unspecified") {
                        println("--modify the dependenies module in pom.xml--->>" + dep.getArtifactId())
                        dep.setGroupId("${mavenGroup}")
                        dep.setVersion("${mavenVersion}")
                    }
                }
            }
        }
    }
    //  processResources << {
    //     file("$destinationDir/version.properties").text = 'version=' + project.version
    // }

    task lib(type: Sync, dependsOn: jar) {
        from configurations.compile
        from jar.archivePath
        into 'build/lib'
    }

    task copylib(type: Copy) {
        from 'build/lib'
        into 'build/lib_ext'
        include 'future*.jar', 'future2*.jar'
    }

    task webapp(type: Sync) {
        from 'src/main/webapp'
        into 'build/lib/webapp'
    }
    task copyEtc(type: Sync) {
        from '../future-utils/src/main/resources'
        into 'build/config/etc'
        from 'src/main/resources'
        into 'build/config/etc'

    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task ziplib(type: Zip) {
        from 'build/config'
        from 'src/dist'
        into('lib') {
            from configurations.runtime
        }
    }

    task copyClass(type: Copy) {
        from 'build/classes'
        into '../build/classes'
    }
    task copySrc(type: Copy) {
        from 'src/main/java'
        into '../build/src/main/java'
    }


    artifacts {
        archives sourcesJar
//        archives javadocJar
    }

}


//dependencies {
//    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
//}


/*project(':future-cat'){
    jar.exclude 'env.conf'
    jar.exclude 'logback.xml'
    dependencies{

        compile fileTree( dir: "lib", include: '*.jar' )
        compile project(':future-global')

        compile 'com.dianping.cat:cat-client:3.0.0'
        compile "org.eclipse.jetty:jetty-server:${jetty_version}"
        compile "org.eclipse.jetty:jetty-servlet:${jetty_version}"
        compile "org.eclipse.jetty:jetty-servlets:${jetty_version}"

        //cat-core
//        compile 'org.unidal.framework:foundation-service:4.1.1'
//        compile 'org.unidal.framework:web-framework:4.1.1'
//        compile 'org.unidal.framework:dal-jdbc:4.1.1'
        compile 'org.xerial.snappy:snappy-java:1.1.7'
        compile 'org.unidal.framework:foundation-service:2.5.0'
        compile 'org.unidal.framework:web-framework:2.4.0'
        compile 'org.unidal.framework:dal-jdbc:2.4.0'
//        compile 'org.xerial.snappy:snappy-java:1.1.2'
        compile 'com.google.code.gson:gson:2.8.5'
        compile 'io.netty:netty-all:4.1.9.Final'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.apache.dubbo:dubbo:2.7.3'

        compile "ch.qos.logback:logback-classic:${logback_version}"
        compile "ch.qos.logback:logback-core:${logback_version}"
        compile "ch.qos.logback:logback-access:${logback_version}"
        compile "org.slf4j:slf4j-api:${slf4j_version}"
        compile "org.slf4j:slf4j-log4j12:${slf4j_version}"
        compile "org.slf4j:slf4j-ext:${slf4j_version}"
        compile "org.slf4j:jcl-over-slf4j:${slf4j_version}"
        compile "org.slf4j:log4j-over-slf4j:${slf4j_version}"
        compile 'net.logstash.logback:logstash-logback-encoder:5.1'
        compile "org.springframework.boot:spring-boot-starter-web:${spring_boot_version}"
        compile 'com.alibaba.nacos:nacos-api:1.2.0'

        testCompile  'org.unidal.framework:test-framework:2.4.0'
        testCompile  'junit:junit:4.8.1'

    }

}*/





















